
server:
  port: ${SPRING_ORDER_SERVER_PORT}

spring:
  application:
    name: order-service
  config:
    import:
    - optional:file:.env[.properties]
  profiles:
    active:
    - ${SPRING_PROFILES_ACTIVE}

  # -------------------------------------------------------------------
  #  Kafka 설정
  # -------------------------------------------------------------------  
  
  kafka:
    bootstrap-servers: ${SPRING_LOCAL_KAFKA}
    consumer:
      auto-offset-reset: earliest
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer


  # -------------------------------------------------------------------
  #  MySQL-Server & JPA 설정
  # -------------------------------------------------------------------  
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${SPRING_ORDER_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}   
    hikari:
      connection-timeout: 20000       # 20초
      maximum-pool-size: 10
      initialization-fail-timeout: 0  # 연결 실패해도 앱이 죽지 않게     
     
    
  jpa:
    hibernate:
      ddl-auto: update   # create-drop : Application이 종료 될 때 모든 테이블을 drop 시켜준다.    
    # show-sql: true     # 콘솔에 출력
    properties:
      hibernate:       
        "[format_sql]": true
   

# -------------------------------------------------------------------
# Logging 설정
# -------------------------------------------------------------------  
logging:
  level:   
    "[org.hibernate.SQL]|": debug            # 로그로 출력
    "[org.hibernate.orm.jdbc.bind]": trace   # 중요 : 바인딩된 값 출력
    "[com.inkcloud.order_service]": trace



# -------------------------------------------------------------------
# Eureka-Server 설정
# -------------------------------------------------------------------  
eureka:
  instance:
    instance-id: ${spring.application.name}:${spring.cloud.client.hostname}:${server.port}
    prefer-ip-address: true       # Eureka 클라이언트가 자신을 등록할 때, 호스트 이름 대신 IP 주소를 사용하여 서비스 레지스리에 등록한다. 
  client:  
    register-with-eureka: true    # Eureka Server에 자가 등록
    fetch-registry: true          # Eureka Server에서 서비스 리포지토리 목록 조회
    service-url:
      defaultZone: http://${SPRING_EUREKA_LOCAL_TEMP}:8761/eureka
      # defaultZone: http://eureka-server:8761/eureka


# -------------------------------------------------------------------
# Eureka 클라이언트 등록 비활성화
# -------------------------------------------------------------------  
# eureka:
#   client:
#     enabled: false